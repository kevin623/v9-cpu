##Title:KLEE: 
Unassisted and Automatic Generation of High-Coverage Tests for Complex Systems Programs
##Author:
Cristian Cadar, Daniel Dunbar, Dawson Engler Stanford University

##Abstract:

作者介绍了一个新的符号执行工具，KLEE，它能针对复杂系统程序自动生成高覆盖率的测试。作者利用KLEE在检查了总共89个独立的应用程序，这些程序运行在上百万个Unix系统中的内核用户态环境下，这是现存开源应用程序进行的最严格测试。基于KLEE恒诚的测试实现了很高的行覆盖率，每个工具平均超过90%，超过了开发者自己进行的测试覆盖。我们在嵌入式系统中进行75个等价工具相同的测试工作，结果更好，其中31个实现100%的覆盖。
作者也利用KLEE作为一个bug发现工具，把它应用到452个应用（它们代码长度超过430K行），KLEE发现了56个严重的bug，包括已经存在了15年的3个bug。最后我们利用KLEE交叉检查了据说功能完全的BUSYBOOK和COREUTILS这2个实用工具，发现了功能正确性的错误和大量不一致的错误。

##内容简介：
	许多软件错误种类，比如功能错误的bug，除非执行每一片代码否则很难发现。这种检测困难大，具有随机性，依赖手工检测的方法，其性能低，导致近期工作采用符号执行来自动生成用于检测的输入。这些工具采用以下此项：替代手工或者随机构造的输入，用允许任何输入的符号输入。用符号值代替程序输入，用符号值代替相应程序操作。当程序执行基于符号值的分支，系统跟随两个分支。当一个分支中断或者遇到bug，一个测试用例根据当前路径条件生成。假设有明确的代码给未做修改的被测代码输入实际的值，这会让被测代码执行相同路径，遇到相同的bug。
	当研究者已经表明，能在某些时候在一定数量的程序上得到更高的覆盖率和发现bug，这时，一个问题就被公开提出：是否这个方法能够有希望在真实应用中也达到较高的测试覆盖率？通常关注两个方面：1 代码执行路径数量。2 在周边环境下执行代码面临的挑战。过去工作对此没有大的帮助。

	论文主要贡献有两个方面：首先，作者提出了一种新符号执行工具，KLEE，它可靠性高，能深入检测大范围的应用程序。KLEE采用各种各样约束来解决最优化问题，能简介显示程序状态，使用启发式的搜索得到较高代码覆盖率。 此外，它采用一个简单，直接的方法来处理外部环境。 这些特性改进了KLEE性能达到数个数量级，令它能检查各种系统密集型的应用。第二点，KlEE能针对多种多样的真实，复杂和与环境关系密切的应用程序能自动生成高覆盖率的测试。评估了89个，超过80000行库代码和61000行代码的工具软件。这些程序与环境密切，提供了各种功能，包括文件系统，显示和配置系统属性，控制命令调用，处理文本文件等等。这些程序运行在内核的用户态，广泛安装在UNIX系统中，被上百万人每天应用，bug修复迅速，新版本发行有规律。此外，它们与运行环境密切相互作用对薄弱处进行符号执行的压力测试。
	此外，发现CoreUTILS的bug很困难。它们是唯一的最好的所能得到的开源应用测试套件。在1995年，作为COREUTILS的一个子集，随机测试发现了少数失败故障。最新的COREUTILS漏洞被报道是3年前。我们检查了另外两个UNIX使用套件：BUSYBOX（广泛用于嵌入式系统），MINIX。最后，作者检查了HISTAR操作系统内核来对比应用程序。开展的实验分成三类：既能发现bug又能获得较高覆盖率；快速运行在许多应用来发现bug；交叉核对等价程序以便于发现更深隐藏的正确性bug。
		总体上，我们在452个应用程序上执行KLEE，超过430K行代码量。据我们所知，这些实验所检查的代码和程序数量级高于先前检查工作量。我们实验表明：
		1.KLEE在大范围的复杂程序上覆盖率高。所生成测试覆盖了COREUTILS总行数的84.5%，BUSYBOX的90.5%。在各种工具软件的平均覆盖率高于90%。
		2. KLEE可以获得显著的高于手动执行的覆盖率。它89个小时在COREUTILS的行覆盖率超过过去15年的，击败了开发者自己的测试套件。
		3. KLEE通过执行大量测试代码发现非常重要的错误。它在COREUTILS上发现10个致命错误，超过2006,2007,2008年的总和。它在BUSYBOX中发现24个bugs，在MINIX发现21个bug，在HISTARS发现56个严重bug。
		4. KLEE测试用例可以运行在任何未修改的代码版本，非常易于测试和错误报告。
		5. KLEE不局限于发现低级程序错误，它在BUSYBOX这种级别工具能在动发现功能级别高级错误和超大数量的不一致错误。
		6. KLEE也可用于非应用级代码。当用于HiSTAR内核，它测试覆盖了76.4%，发现了一个严重的安全bug。
